@page "/formproblem"
@implements IDisposable
@inject PersistentComponentState ApplicationState
@*@rendermode InteractiveAuto*@


@rendermode InteractiveWebAssembly
@*@rendermode @(new InteractiveWebAssemblyRenderMode(false))*@

<h3>FormProblem @(OperatingSystem.IsBrowser() ? "WASM" : "SERVER")</h3>


<EditForm EditContext="EC" FormName="RegisterContactForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="firstname" class="form-label">First Name</label>
        <InputText Id="firstname" class="form-control" AutoComplete="off" @bind-Value="Model.Name"></InputText>
        <ValidationMessage For="@(() => Model.Name)" />
    </div>
    <div class="mb-3">
        <label for="lastname" class="form-label">Email</label>
        <InputText Id="lastname" class="form-control" AutoComplete="off" @bind-Value="@Model.Email"></InputText>
        <ValidationMessage For="@(() => Model.Email)" />
    </div>


    <button type="submit" @onclick="HandleSubmit" class="btn btn-primary">Submit</button>
</EditForm>

@code {

    private PersistingComponentStateSubscription persistingSubscription;


    private EditContext EC { get; set; }

    private ValidationMessageStore validationMessageStore;

    public FormModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistForm);



        if (!ApplicationState.TryTakeFromJson<FormModel>("registerForm", out var restored))
        {
            Model = new FormModel();
            Model.Name = "foo";
            EC = new EditContext(Model);
            validationMessageStore = new ValidationMessageStore(EC);
            this.StateHasChanged();



        }
        else
        {
            Console.WriteLine("Restored: " + restored.Name);
            Model = restored;
            EC = new EditContext(Model);
            validationMessageStore = new ValidationMessageStore(EC);

            this.StateHasChanged();
        }

    }

    private Task PersistForm()
    {
        ApplicationState.PersistAsJson("registerForm", Model);

        return Task.CompletedTask;
    }

    private async Task HandleSubmit()
    {
        if (EC.Validate())
        {


            //await Task.Delay(1000);

        }
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
